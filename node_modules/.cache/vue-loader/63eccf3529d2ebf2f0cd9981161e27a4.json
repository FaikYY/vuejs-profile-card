{"remainingRequest":"C:\\Users\\SyReus\\Documents\\Playground\\Vue\\hello-world\\node_modules\\vue-loader-v16\\dist\\index.js??ref--1-1!C:\\Users\\SyReus\\Documents\\Playground\\Vue\\hello-world\\src\\components\\DarkMode.vue?vue&type=style&index=0&id=34154de9&lang=css","dependencies":[{"path":"C:\\Users\\SyReus\\Documents\\Playground\\Vue\\hello-world\\src\\components\\DarkMode.vue","mtime":1638665322080},{"path":"C:\\Users\\SyReus\\Documents\\Playground\\Vue\\hello-world\\node_modules\\css-loader\\dist\\cjs.js","mtime":1638517703163},{"path":"C:\\Users\\SyReus\\Documents\\Playground\\Vue\\hello-world\\node_modules\\vue-loader-v16\\dist\\stylePostLoader.js","mtime":1638517704303},{"path":"C:\\Users\\SyReus\\Documents\\Playground\\Vue\\hello-world\\node_modules\\postcss-loader\\src\\index.js","mtime":1638517703678},{"path":"C:\\Users\\SyReus\\Documents\\Playground\\Vue\\hello-world\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1638517702678},{"path":"C:\\Users\\SyReus\\Documents\\Playground\\Vue\\hello-world\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1638517703850}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQoudnVlLWRhcmstbW9kZSB7DQogIGFwcGVhcmFuY2U6IG5vbmU7DQogIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTsNCiAgLW1vei1hcHBlYXJhbmNlOiBub25lOw0KICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDsNCiAgY29sb3I6IGluaGVyaXQ7DQogIGJvcmRlcjogbm9uZTsNCiAgY3Vyc29yOiBwb2ludGVyOw0KfQ0KLnZpc3VhbGx5LWhpZGRlbiB7DQogIHBvc2l0aW9uOiBhYnNvbHV0ZTsNCiAgd2hpdGUtc3BhY2U6IG5vd3JhcDsNCiAgd2lkdGg6IDFweDsNCiAgaGVpZ2h0OiAxcHg7DQogIG92ZXJmbG93OiBoaWRkZW47DQogIGJvcmRlcjogMDsNCiAgcGFkZGluZzogMDsNCiAgY2xpcDogcmVjdCgwIDAgMCAwKTsNCiAgY2xpcC1wYXRoOiBpbnNldCg1MCUpOw0KICBtYXJnaW46IC0xcHg7DQp9DQo="},{"version":3,"sources":["C:\\Users\\SyReus\\Documents\\Playground\\Vue\\hello-world\\src\\components\\DarkMode.vue"],"names":[],"mappings":";AA0LA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;EACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACxB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAC7B,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;EACf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACnB,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;EACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;EACV,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;EACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AACd","file":"C:/Users/SyReus/Documents/Playground/Vue/hello-world/src/components/DarkMode.vue","sourceRoot":"","sourcesContent":["<template>\r\n  <button\r\n    :aria-label=\"getAriaLabel\"\r\n    class=\"vue-dark-mode\"\r\n    @click=\"toggleColorMode\"\r\n  >\r\n    <span\r\n      class=\"visually-hidden\"\r\n      aria-live=\"assertive\"\r\n      v-text=\"getAriaLive\"\r\n    />\r\n    <slot :mode=\"chosenMode\" />\r\n  </button>\r\n</template>\r\n\r\n<script>\r\nimport {\r\n  storage,\r\n  getMediaQueryList\r\n} from './utils'\r\nexport default {\r\n  name: 'DarkMode',\r\n  props: {\r\n    defaultMode: {\r\n      type: String,\r\n      default: 'light'\r\n    },\r\n    modes: {\r\n      type: Array,\r\n      default () {\r\n        return ['light', 'dark', 'system']\r\n      }\r\n    },\r\n    className: {\r\n      type: String,\r\n      validator: str => str.includes('%cm'),\r\n      default: '%cm-mode'\r\n    },\r\n    storage: {\r\n      type: [String, Object],\r\n      validator: storage => {\r\n        if (typeof storage === 'string') return ['localStorage', 'sessionStorage'].includes(storage)\r\n        return Object.keys(storage).every(key => ['getItem', 'setItem'].includes(key))\r\n      },\r\n      default: 'localStorage'\r\n    },\r\n    metaThemeColor: {\r\n      type: Object,\r\n      default: () => ({})\r\n    },\r\n    ariaLabel: {\r\n      type: String,\r\n      validator: str => str.includes('%cm'),\r\n      default: 'toggle to %cm mode color'\r\n    },\r\n    ariaLive: {\r\n      type: String,\r\n      validator: str => str.includes('%cm'),\r\n      default: '%cm color mode is enabled'\r\n    },\r\n    favicon: {\r\n      type: [String, Boolean],\r\n      default: 'link[rel=\"icon\"]'\r\n    }\r\n  },\r\n  data () {\r\n    return {\r\n      chosenMode: null,\r\n      currentMode: null,\r\n      listenerDark: null,\r\n      metaThemeColorElement: null\r\n    }\r\n  },\r\n  computed: {\r\n    getPrefersColorScheme () {\r\n      if (this.$isServer) return this.getStorage.getItem('colorModePrefer')\r\n      const colorSchemeTypes = ['dark', 'light']\r\n      let colorScheme = null\r\n      colorSchemeTypes.forEach(type => {\r\n        if (getMediaQueryList(type).matches) {\r\n          colorScheme = type\r\n        }\r\n      })\r\n      return colorScheme\r\n    },\r\n    getAriaLabel () {\r\n      return this.ariaLabel.replace(/%cm/g, this.getNextMode)\r\n    },\r\n    getAriaLive () {\r\n      return this.ariaLive.replace(/%cm/g, this.chosenMode)\r\n    },\r\n    getNextMode () {\r\n      const currentIndex = this.modes.findIndex(mode => mode === this.chosenMode)\r\n      return this.modes[currentIndex === (this.modes.length - 1) ? 0 : currentIndex + 1]\r\n    },\r\n    getStorage () {\r\n      if (typeof this.storage !== 'string') return this.storage\r\n      if (this.$isServer) return false\r\n      return storage(this.storage)\r\n    },\r\n    getStorageColorMode () {\r\n      if (!this.getStorage) return this.defaultMode\r\n      return this.getStorage.getItem('colorMode')\r\n    },\r\n    isSystem () {\r\n      return this.getStorageColorMode === 'system'\r\n    }\r\n  },\r\n  watch: {\r\n    defaultMode: 'handleSetMode'\r\n  },\r\n  created () {\r\n    if (this.getPrefersColorScheme && this.isSystem) {\r\n      this.currentMode = this.getPrefersColorScheme\r\n      return this.setMode('system')\r\n    }\r\n    const colorMode = this.getStorageColorMode || this.defaultMode\r\n    this.currentMode = colorMode\r\n    this.setMode(colorMode)\r\n  },\r\n  mounted () {\r\n    this.metaThemeColorElement = document.querySelector('meta[name=\"theme-color\"]')\r\n    this.listenerDark = getMediaQueryList('dark')\r\n    this.listenerDark.addListener(this.handlePreferColorScheme)\r\n    this.toggleFavicon(this.getPrefersColorScheme)\r\n  },\r\n  beforeUnmount () {\r\n    this.listenerDark.removeListener(this.handlePreferColorScheme)\r\n  },\r\n  methods: {\r\n    setMode (chosenMode) {\r\n      this.chosenMode = chosenMode\r\n      if (this.getStorage) {\r\n        this.getStorage.setItem('colorMode', this.chosenMode)\r\n        if (this.chosenMode === 'system') this.getStorage.setItem('colorModePrefer', this.getPrefersColorScheme)\r\n      }\r\n      this.handleColorModeClass('add')\r\n      if (Object.keys(this.metaThemeColor).length) this.setMetaThemeColor(this.metaThemeColor[this.currentMode] || this.metaThemeColor[this.getPrefersColorScheme])\r\n      this.$emit('change-mode', this.chosenMode)\r\n    },\r\n    setMetaThemeColor (color) {\r\n      if (color) {\r\n        this.$nextTick(() => {\r\n          if (this.metaThemeColorElement) this.metaThemeColorElement.setAttribute('content', color)\r\n        })\r\n      }\r\n    },\r\n    toggleFavicon (mode) {\r\n      if (!this.favicon) return\r\n      this.$nextTick(() => {\r\n        const favicon = document.querySelector(this.favicon)\r\n        if (!favicon) return\r\n        const href = favicon.getAttribute('href')\r\n        const lastFour = href.substr(-4, 4)\r\n        const favDarkStr = `-dark${lastFour}`\r\n        favicon.setAttribute('href', mode === 'light' ? href.replace(favDarkStr, lastFour) : href.replace(lastFour, favDarkStr))\r\n      })\r\n    },\r\n    handleColorModeClass (action) {\r\n      const className = `${this.className.replace(/%cm/g, this.currentMode)}`\r\n      if (!this.$isServer) return document.documentElement.classList[action](className)\r\n      this.$ssrContext.colorModeClass = this.currentMode === 'system' ? `${this.className.replace(/%cm/g, this.getPrefersColorScheme)}` : className // Adds the className in the ssr context for the user to insert as they wish in the HTML tag\r\n    },\r\n    handlePreferColorScheme (e) {\r\n      const colorMatch = e.matches ? 'dark' : 'light'\r\n      this.toggleFavicon(colorMatch)\r\n      if (this.isSystem) {\r\n        this.handleColorModeClass('remove')\r\n        this.currentMode = colorMatch\r\n        this.setMode('system')\r\n      }\r\n    },\r\n    toggleColorMode () {\r\n      const selectedMode = this.getNextMode\r\n      this.handleSetMode(selectedMode)\r\n    },\r\n    handleSetMode (selectedMode) {\r\n      this.handleColorModeClass('remove')\r\n      this.currentMode = selectedMode === 'system' ? this.getPrefersColorScheme : selectedMode\r\n      this.setMode(selectedMode)\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n.vue-dark-mode {\r\n  appearance: none;\r\n  -webkit-appearance: none;\r\n  -moz-appearance: none;\r\n  background-color: transparent;\r\n  color: inherit;\r\n  border: none;\r\n  cursor: pointer;\r\n}\r\n.visually-hidden {\r\n  position: absolute;\r\n  white-space: nowrap;\r\n  width: 1px;\r\n  height: 1px;\r\n  overflow: hidden;\r\n  border: 0;\r\n  padding: 0;\r\n  clip: rect(0 0 0 0);\r\n  clip-path: inset(50%);\r\n  margin: -1px;\r\n}\r\n</style>"]}]}