{"remainingRequest":"C:\\Users\\SyReus\\Documents\\Playground\\Vue\\hello-world\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\SyReus\\Documents\\Playground\\Vue\\hello-world\\node_modules\\vue-loader-v16\\dist\\templateLoader.js??ref--6!C:\\Users\\SyReus\\Documents\\Playground\\Vue\\hello-world\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\Users\\SyReus\\Documents\\Playground\\Vue\\hello-world\\node_modules\\vue-loader-v16\\dist\\index.js??ref--1-1!C:\\Users\\SyReus\\Documents\\Playground\\Vue\\hello-world\\src\\components\\DarkMode.vue?vue&type=template&id=34154de9","dependencies":[{"path":"C:\\Users\\SyReus\\Documents\\Playground\\Vue\\hello-world\\src\\components\\DarkMode.vue","mtime":1638665322080},{"path":"C:\\Users\\SyReus\\Documents\\Playground\\Vue\\hello-world\\babel.config.js","mtime":1638517709911},{"path":"C:\\Users\\SyReus\\Documents\\Playground\\Vue\\hello-world\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1638517702678},{"path":"C:\\Users\\SyReus\\Documents\\Playground\\Vue\\hello-world\\node_modules\\babel-loader\\lib\\index.js","mtime":1638517703678},{"path":"C:\\Users\\SyReus\\Documents\\Playground\\Vue\\hello-world\\node_modules\\vue-loader-v16\\dist\\templateLoader.js","mtime":1638517704334},{"path":"C:\\Users\\SyReus\\Documents\\Playground\\Vue\\hello-world\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1638517702678},{"path":"C:\\Users\\SyReus\\Documents\\Playground\\Vue\\hello-world\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1638517703850}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgdG9EaXNwbGF5U3RyaW5nIGFzIF90b0Rpc3BsYXlTdHJpbmcsIGNyZWF0ZUVsZW1lbnRWTm9kZSBhcyBfY3JlYXRlRWxlbWVudFZOb2RlLCByZW5kZXJTbG90IGFzIF9yZW5kZXJTbG90LCBvcGVuQmxvY2sgYXMgX29wZW5CbG9jaywgY3JlYXRlRWxlbWVudEJsb2NrIGFzIF9jcmVhdGVFbGVtZW50QmxvY2sgfSBmcm9tICJ2dWUiOwp2YXIgX2hvaXN0ZWRfMSA9IFsiYXJpYS1sYWJlbCJdOwp2YXIgX2hvaXN0ZWRfMiA9IFsidGV4dENvbnRlbnQiXTsKZXhwb3J0IGZ1bmN0aW9uIHJlbmRlcihfY3R4LCBfY2FjaGUsICRwcm9wcywgJHNldHVwLCAkZGF0YSwgJG9wdGlvbnMpIHsKICByZXR1cm4gX29wZW5CbG9jaygpLCBfY3JlYXRlRWxlbWVudEJsb2NrKCJidXR0b24iLCB7CiAgICAiYXJpYS1sYWJlbCI6ICRvcHRpb25zLmdldEFyaWFMYWJlbCwKICAgIGNsYXNzOiAidnVlLWRhcmstbW9kZSIsCiAgICBvbkNsaWNrOiBfY2FjaGVbMF0gfHwgKF9jYWNoZVswXSA9IGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuICRvcHRpb25zLnRvZ2dsZUNvbG9yTW9kZSAmJiAkb3B0aW9ucy50b2dnbGVDb2xvck1vZGUuYXBwbHkoJG9wdGlvbnMsIGFyZ3VtZW50cyk7CiAgICB9KQogIH0sIFtfY3JlYXRlRWxlbWVudFZOb2RlKCJzcGFuIiwgewogICAgY2xhc3M6ICJ2aXN1YWxseS1oaWRkZW4iLAogICAgImFyaWEtbGl2ZSI6ICJhc3NlcnRpdmUiLAogICAgdGV4dENvbnRlbnQ6IF90b0Rpc3BsYXlTdHJpbmcoJG9wdGlvbnMuZ2V0QXJpYUxpdmUpCiAgfSwgbnVsbCwgOAogIC8qIFBST1BTICovCiAgLCBfaG9pc3RlZF8yKSwgX3JlbmRlclNsb3QoX2N0eC4kc2xvdHMsICJkZWZhdWx0IiwgewogICAgbW9kZTogJGRhdGEuY2hvc2VuTW9kZQogIH0pXSwgOAogIC8qIFBST1BTICovCiAgLCBfaG9pc3RlZF8xKTsKfQ=="},{"version":3,"sources":["C:\\Users\\SyReus\\Documents\\Playground\\Vue\\hello-world\\src\\components\\DarkMode.vue"],"names":[],"mappings":";;;;uBACE,mBAAA,CAWS,QAXT,EAWS;AAVN,kBAAY,QAAA,CAAA,YAUN;AATP,IAAA,KAAK,EAAC,eASC;AARN,IAAA,OAAK,EAAA,MAAA,CAAA,CAAA,CAAA,KAAA,MAAA,CAAA,CAAA,CAAA,GAAA;AAAA,aAAE,QAAA,CAAA,eAAA,IAAA,QAAA,CAAA,eAAA,OAAA,QAAA,YAAF;AAAA,KAAA;AAQC,GAXT,E,CAKE,mBAAA,CAIE,MAJF,EAIE;AAHA,IAAA,KAAK,EAAC,iBAGN;AAFA,iBAAU,WAEV;iBADA,gBAAA,CAAoB,QAAA,CAAD,WAAnB;AACA,GAJF,E,IAAA,E;;AAAA,I,UAAA,C,EAKA,WAAA,CAA2B,IAAA,CAAA,MAA3B,EAA2B,SAA3B,EAA2B;AAApB,IAAA,IAAI,EAAE,KAAA,CAAA;AAAc,GAA3B,C,CAVF,E;;AAAA,I,UAAA,C","sourcesContent":["<template>\r\n  <button\r\n    :aria-label=\"getAriaLabel\"\r\n    class=\"vue-dark-mode\"\r\n    @click=\"toggleColorMode\"\r\n  >\r\n    <span\r\n      class=\"visually-hidden\"\r\n      aria-live=\"assertive\"\r\n      v-text=\"getAriaLive\"\r\n    />\r\n    <slot :mode=\"chosenMode\" />\r\n  </button>\r\n</template>\r\n\r\n<script>\r\nimport {\r\n  storage,\r\n  getMediaQueryList\r\n} from './utils'\r\nexport default {\r\n  name: 'DarkMode',\r\n  props: {\r\n    defaultMode: {\r\n      type: String,\r\n      default: 'light'\r\n    },\r\n    modes: {\r\n      type: Array,\r\n      default () {\r\n        return ['light', 'dark', 'system']\r\n      }\r\n    },\r\n    className: {\r\n      type: String,\r\n      validator: str => str.includes('%cm'),\r\n      default: '%cm-mode'\r\n    },\r\n    storage: {\r\n      type: [String, Object],\r\n      validator: storage => {\r\n        if (typeof storage === 'string') return ['localStorage', 'sessionStorage'].includes(storage)\r\n        return Object.keys(storage).every(key => ['getItem', 'setItem'].includes(key))\r\n      },\r\n      default: 'localStorage'\r\n    },\r\n    metaThemeColor: {\r\n      type: Object,\r\n      default: () => ({})\r\n    },\r\n    ariaLabel: {\r\n      type: String,\r\n      validator: str => str.includes('%cm'),\r\n      default: 'toggle to %cm mode color'\r\n    },\r\n    ariaLive: {\r\n      type: String,\r\n      validator: str => str.includes('%cm'),\r\n      default: '%cm color mode is enabled'\r\n    },\r\n    favicon: {\r\n      type: [String, Boolean],\r\n      default: 'link[rel=\"icon\"]'\r\n    }\r\n  },\r\n  data () {\r\n    return {\r\n      chosenMode: null,\r\n      currentMode: null,\r\n      listenerDark: null,\r\n      metaThemeColorElement: null\r\n    }\r\n  },\r\n  computed: {\r\n    getPrefersColorScheme () {\r\n      if (this.$isServer) return this.getStorage.getItem('colorModePrefer')\r\n      const colorSchemeTypes = ['dark', 'light']\r\n      let colorScheme = null\r\n      colorSchemeTypes.forEach(type => {\r\n        if (getMediaQueryList(type).matches) {\r\n          colorScheme = type\r\n        }\r\n      })\r\n      return colorScheme\r\n    },\r\n    getAriaLabel () {\r\n      return this.ariaLabel.replace(/%cm/g, this.getNextMode)\r\n    },\r\n    getAriaLive () {\r\n      return this.ariaLive.replace(/%cm/g, this.chosenMode)\r\n    },\r\n    getNextMode () {\r\n      const currentIndex = this.modes.findIndex(mode => mode === this.chosenMode)\r\n      return this.modes[currentIndex === (this.modes.length - 1) ? 0 : currentIndex + 1]\r\n    },\r\n    getStorage () {\r\n      if (typeof this.storage !== 'string') return this.storage\r\n      if (this.$isServer) return false\r\n      return storage(this.storage)\r\n    },\r\n    getStorageColorMode () {\r\n      if (!this.getStorage) return this.defaultMode\r\n      return this.getStorage.getItem('colorMode')\r\n    },\r\n    isSystem () {\r\n      return this.getStorageColorMode === 'system'\r\n    }\r\n  },\r\n  watch: {\r\n    defaultMode: 'handleSetMode'\r\n  },\r\n  created () {\r\n    if (this.getPrefersColorScheme && this.isSystem) {\r\n      this.currentMode = this.getPrefersColorScheme\r\n      return this.setMode('system')\r\n    }\r\n    const colorMode = this.getStorageColorMode || this.defaultMode\r\n    this.currentMode = colorMode\r\n    this.setMode(colorMode)\r\n  },\r\n  mounted () {\r\n    this.metaThemeColorElement = document.querySelector('meta[name=\"theme-color\"]')\r\n    this.listenerDark = getMediaQueryList('dark')\r\n    this.listenerDark.addListener(this.handlePreferColorScheme)\r\n    this.toggleFavicon(this.getPrefersColorScheme)\r\n  },\r\n  beforeUnmount () {\r\n    this.listenerDark.removeListener(this.handlePreferColorScheme)\r\n  },\r\n  methods: {\r\n    setMode (chosenMode) {\r\n      this.chosenMode = chosenMode\r\n      if (this.getStorage) {\r\n        this.getStorage.setItem('colorMode', this.chosenMode)\r\n        if (this.chosenMode === 'system') this.getStorage.setItem('colorModePrefer', this.getPrefersColorScheme)\r\n      }\r\n      this.handleColorModeClass('add')\r\n      if (Object.keys(this.metaThemeColor).length) this.setMetaThemeColor(this.metaThemeColor[this.currentMode] || this.metaThemeColor[this.getPrefersColorScheme])\r\n      this.$emit('change-mode', this.chosenMode)\r\n    },\r\n    setMetaThemeColor (color) {\r\n      if (color) {\r\n        this.$nextTick(() => {\r\n          if (this.metaThemeColorElement) this.metaThemeColorElement.setAttribute('content', color)\r\n        })\r\n      }\r\n    },\r\n    toggleFavicon (mode) {\r\n      if (!this.favicon) return\r\n      this.$nextTick(() => {\r\n        const favicon = document.querySelector(this.favicon)\r\n        if (!favicon) return\r\n        const href = favicon.getAttribute('href')\r\n        const lastFour = href.substr(-4, 4)\r\n        const favDarkStr = `-dark${lastFour}`\r\n        favicon.setAttribute('href', mode === 'light' ? href.replace(favDarkStr, lastFour) : href.replace(lastFour, favDarkStr))\r\n      })\r\n    },\r\n    handleColorModeClass (action) {\r\n      const className = `${this.className.replace(/%cm/g, this.currentMode)}`\r\n      if (!this.$isServer) return document.documentElement.classList[action](className)\r\n      this.$ssrContext.colorModeClass = this.currentMode === 'system' ? `${this.className.replace(/%cm/g, this.getPrefersColorScheme)}` : className // Adds the className in the ssr context for the user to insert as they wish in the HTML tag\r\n    },\r\n    handlePreferColorScheme (e) {\r\n      const colorMatch = e.matches ? 'dark' : 'light'\r\n      this.toggleFavicon(colorMatch)\r\n      if (this.isSystem) {\r\n        this.handleColorModeClass('remove')\r\n        this.currentMode = colorMatch\r\n        this.setMode('system')\r\n      }\r\n    },\r\n    toggleColorMode () {\r\n      const selectedMode = this.getNextMode\r\n      this.handleSetMode(selectedMode)\r\n    },\r\n    handleSetMode (selectedMode) {\r\n      this.handleColorModeClass('remove')\r\n      this.currentMode = selectedMode === 'system' ? this.getPrefersColorScheme : selectedMode\r\n      this.setMode(selectedMode)\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n.vue-dark-mode {\r\n  appearance: none;\r\n  -webkit-appearance: none;\r\n  -moz-appearance: none;\r\n  background-color: transparent;\r\n  color: inherit;\r\n  border: none;\r\n  cursor: pointer;\r\n}\r\n.visually-hidden {\r\n  position: absolute;\r\n  white-space: nowrap;\r\n  width: 1px;\r\n  height: 1px;\r\n  overflow: hidden;\r\n  border: 0;\r\n  padding: 0;\r\n  clip: rect(0 0 0 0);\r\n  clip-path: inset(50%);\r\n  margin: -1px;\r\n}\r\n</style>"],"sourceRoot":""}]}